-=: POST DATA FORMAT :=--------------------------

The JSON Location Tracker protocol is very simple.

The JLT will "POST" http messages to any URL.  The post message will have a
single paramater, "fixes" which will contain a JSON *string*:

    [
        {
            t:  result.timestamp,
            ll: [ result.latitude, result.longitude ],
            ha: result.horizAccuracy,
            va: result.vertAccuracy,
            al: result.altitude,
            vv: [ result.velocity, result.heading ]

            tag: "string here", /* optional, may be omitted */
            poi: "string here", /* optional */
        },

        ...,
    ]

The "t" index *may* be an array of timestamps as follows:

    [
        {
            t:  [timestamp, timestamp, timestamp, timestamp, ... ],
            ll: [ result.latitude, result.longitude ],
            ha: result.horizAccuracy,
            va: result.vertAccuracy,
            al: result.altitude,
            vv: [ result.velocity, result.heading ]
        },

        ...
    ]

CGI data syncs *must* respond with *either* the timestamp of the message or the
*first* timestamp of the message; for each fix in the array of fixes:

    { fix_tlist: [ timestamp, timestamp, timestamp, ... ]}


-=: POST DATA UNITS :=--------------------------

- timestamps (t) is measured in miliseconds since the epoch
- latitude and longitude (ll) is a two tuple, measured in degrees
- accuracy (ha, va) is measured in meters [presumably above mean sea level]
- altitude (al) is in meters
- velocity (vv) is a two tuple.  The first element is the speed in
  meters/second and the second element is the direction in compass azimuth
  degrees


-=: Authentication and Push variables :=---------------------------

The CGI response *may* contain a meta section as follows

    { fix_tlist: [ timestamp, timestamp, timestamp, ... ],
      meta: {
          view_url: "http://blarg/",
          auth_url: "http://blarg/",
      }
    }

At this time there are only two push variables, but there may be more in the
future.

- If provided, the view_url is used to overwrite/fill the viewURL field of the
  control panel.

- If provided, the auth_url will instruct the JLT to stop collecting new fixes,
  prevent the upload of buffered data (temporally) and open a browser card.

  The browser card expects an authentication token (via dialog) to continue.
  If this token is set, then it will be handed to the postURL along the fix
  data.  That is, along with the "fixes" param, your CGI will also receive a
  "token" param -- which can be used to convince the application of the
  identity of the sender.


NOTE: Many hours were spent trying to get the application to meaningfully
interact with a WebView widget.  It is not possible to get any data from a
WebView widget (other than via the command menu and dialogs) because the
Browser service intentionally runs in a spearate process.

This is essentially the best that can be done aside from fetching auth data
HTML and pasting it into a dialog.  This was avoided because the author's
authentication system is OpenID and it's not realistic to do OpenID
authentication as Ajax.
